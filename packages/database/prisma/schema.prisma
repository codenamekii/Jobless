// packages/database/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - untuk authentication dan profile
model User {
  id              String        @id @default(uuid())
  email           String        @unique
  password        String
  fullName        String
  profilePicture  String?
  isActive        Boolean       @default(true)
  emailVerified   Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  applications    Application[]
  refreshTokens   RefreshToken[]

  @@index([email])
}

// Refresh token untuk JWT refresh mechanism
model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

// Application model - setiap lamaran kerja
model Application {
  id                String      @id @default(uuid())
  userId            String
  companyName       String
  position          String
  jobType           JobType     @default(FULL_TIME)
  location          String?
  salaryRange       String?
  jobDescription    String?     @db.Text
  applicationDate   DateTime    @default(now())
  applicationMethod ApplicationMethod @default(WEBSITE)
  applicationUrl    String?
  contactPerson     String?
  contactEmail      String?
  contactPhone      String?
  status            ApplicationStatus @default(APPLIED)
  priority          Int         @default(3) // 1-5, 5 being highest
  interviewDate     DateTime?
  deadlineDate      DateTime?
  notes             String?     @db.Text
  tags              String[]    @default([])
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents         Document[]
  statusHistory     ApplicationStatusHistory[]
  reminders         Reminder[]

  @@index([userId])
  @@index([status])
  @@index([companyName])
  @@index([position])
  @@index([applicationDate])
}

// Document model - untuk resume, cover letter, dll
model Document {
  id              String       @id @default(uuid())
  applicationId   String
  documentType    DocumentType
  fileName        String
  originalName    String
  filePath        String
  fileSize        Int          // in bytes
  mimeType        String
  uploadedAt      DateTime     @default(now())

  // Relations
  application     Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId])
}

// Status history untuk tracking perubahan
model ApplicationStatusHistory {
  id              String      @id @default(uuid())
  applicationId   String
  fromStatus      ApplicationStatus?
  toStatus        ApplicationStatus
  reason          String?
  changedAt       DateTime    @default(now())

  // Relations
  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId])
  @@index([changedAt])
}

// Reminder model untuk notifikasi
model Reminder {
  id              String      @id @default(uuid())
  applicationId   String
  title           String
  description     String?
  reminderDate    DateTime
  isCompleted     Boolean     @default(false)
  completedAt     DateTime?
  createdAt       DateTime    @default(now())

  // Relations
  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId])
  @@index([reminderDate])
  @@index([isCompleted])
}

// ENUMS
enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
  REMOTE
  HYBRID
}

enum ApplicationMethod {
  WEBSITE
  EMAIL
  LINKEDIN
  JOBSTREET
  INDEED
  REFERRAL
  DIRECT
  OTHER
}

enum ApplicationStatus {
  DRAFT
  APPLIED
  REVIEWING
  INTERVIEW_SCHEDULED
  INTERVIEWED
  TECHNICAL_TEST
  REFERENCE_CHECK
  OFFER_RECEIVED
  NEGOTIATING
  ACCEPTED
  REJECTED
  WITHDRAWN
  ON_HOLD
}

enum DocumentType {
  RESUME
  COVER_LETTER
  PORTFOLIO
  CERTIFICATE
  TRANSCRIPT
  REFERENCE
  OTHER
}